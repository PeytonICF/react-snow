{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rgupta/Documents/GitHub/react-snow/pages/article/[id]/index.js\";\nimport { username, psd } from '../../../config';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Meta from '../../../components/Meta';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport Accordion from '../../../components/Accordion';\n\nconst article = ({\n  article\n}) => {\n  let a = article.result.body;\n  let b = a.substring(a.indexOf('#%') + 2, a.indexOf('%#'));\n  let c = a.substring(a.indexOf('{{') + 2, a.indexOf('}}'));\n  let d = a.substring(0, a.indexOf('{{'));\n  let e = a.substring(a.indexOf('}}') + 2, a.length);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: article.result.name_of_page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      class: \"usa-tag\",\n      children: article.result.sys_updated_on\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), b == \"accordion\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: ReactHtmlParser(d)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        accordion: article.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: ReactHtmlParser(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getStaticProps = async context => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder/${context.params.id}`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const article = await res.json();\n  console.log(article);\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n    }\n  });\n  const articles = await res.json();\n  const ids = articles.result.map(article => article.sys_id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport default article;","map":{"version":3,"sources":["/Users/rgupta/Documents/GitHub/react-snow/pages/article/[id]/index.js"],"names":["username","psd","Link","useRouter","Meta","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Accordion","article","a","result","body","b","substring","indexOf","c","d","e","length","name_of_page","sys_updated_on","getStaticProps","context","res","fetch","params","id","method","headers","btoa","json","console","log","props","getStaticPaths","articles","ids","map","sys_id","paths","toString","fallback"],"mappings":"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","sourcesContent":["import { username, psd } from '../../../config'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport Meta from '../../../components/Meta'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\nimport Accordion from '../../../components/Accordion';\n\n\nconst article = ({ article }) => {\n  let a = article.result.body\n  let b = a.substring(a.indexOf('#%')+2,a.indexOf('%#'))\n  let c = a.substring(a.indexOf('{{')+2,a.indexOf('}}'))\n  let d = a.substring(0,a.indexOf('{{'))\n  let e = a.substring(a.indexOf('}}')+2,a.length)\n  return (\n    <>\n      <h1>{article.result.name_of_page}</h1>\n      <span class=\"usa-tag\">{article.result.sys_updated_on}</span>\n      {((b ==\"accordion\")?<>\n      <div>{ReactHtmlParser(d)}</div>\n      <Accordion accordion={article.result}></Accordion>\n      <div>{ReactHtmlParser(e)}</div></>:<div>hello</div>)\n      }\n      <br />\n      <Link href='/'>Go Back</Link>\n    </>\n  )\n}\n\nexport const getStaticProps = async (context) => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder/${context.params.id}`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n      }\n  })\n\n  const article = await res.json()\n  console.log(article)\n\n  return {\n    props: {\n      article,\n    },\n  }\n}\n\nexport const getStaticPaths = async () => {\n  const res = await fetch(`https://dev69061.service-now.com/api/now/table/x_682526_page_bu_0_cwig_page_builder`, {\n    method: 'get',\n    headers: {\n      'Authorization': 'Basic ' + btoa(`${username}:${psd}`)\n      }\n  })\n\n  const articles = await res.json()\n\n  const ids = articles.result.map((article) => article.sys_id)\n  const paths = ids.map((id) => ({ params: { id: id.toString() } }))\n\n  return {\n    paths,\n    fallback: false,\n  }\n}\n\nexport default article\n"]},"metadata":{},"sourceType":"module"}